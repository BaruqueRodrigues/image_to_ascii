imager::load.image("https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/Aster_Tataricus.JPG/1024px-Aster_Tataricus.JPG")
a <- imager::load.image("https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/Aster_Tataricus.JPG/1024px-Aster_Tataricus.JPG")
a
plot(a)
gtools::chr(38:126)
library(tidyverse)
library(cowplot)
library(imager)
library(here)
# Acessando a imagem no diretório
path_image <- here::here('data/amor.jpg')
# Carregando ela dentro do ambiente do R
amor <- load.image(path_image)
# Plotando a imagem
plot(amor)
transforma_em_texto <- function(texto){
implot(
imfill(50,50, val = 1),
text(25, 25, texto, cex = 5) %>%
grayscale %>%
mean
)
}
transforma_em_texto <- function(texto){
implot(
imfill(50,50, val = 1),
text(25, 25, texto, cex = 5)
) %>% grayscale %>% mean
}
asc <- gtools::chr(38:126)
g <- map_dbl(
asc,
~transforma_em_texto(.x)
)
)
# Acessando a imagem no diretório
path_image <- here::here('data/amor.jpg')
# Carregando ela dentro do ambiente do R
amor <- load.image(path_image)
# Plotando a imagem
plot(amor)
transforma_em_texto <- function(texto){
implot(
imfill(50,50, val = 1),
text(25, 25, texto, cex = 5) %>%
grayscale %>%
mean
)
}
transforma_em_texto <- function(texto){
implot(
imfill(50,50, val = 1),
text(25, 25, texto, cex = 5)
) %>% grayscale %>% mean
}
transforma_em_texto <- function(texto){
implot(
imfill(50,50, val = 1),
text(25, 25, texto, cex = 5) %>%
grayscale %>%
mean
)
}
transforma_em_texto <- function(texto){
implot(
imfill(50,50, val = 1),
text(25, 25, texto, cex = 5)
) %>% grayscale %>% mean
}
asc <- gtools::chr(38:126)
g <- map_dbl(
asc,
~transforma_em_texto(.x)
)
g <- map_dbl(
asc,
~transforma_em_texto(.x)
)
g <- map_dbl(
asc,
~transforma_em_texto(.x)
)
# Ordenando os caracteres ascii por brilho
brilho_asc <-   tibble(asc) %>%
mutate(
brilho = map_dbl(
asc,
~transforma_em_texto(.x)
)
) %>%
arrange(brilho)
#Convert image to grayscale, resize, convert to data.frame
dataset_imagem <- grayscale(amor) %>%
imresize(.5)  %>%
as.data.frame() %>%
tibble() %>%
mutate(
quantized_values = cut(value, n) %>% as.integer(),
brilho = brilho_asc$asc[quantized_values]
)
# Acessando a imagem no diretório
path_image <- here::here('data/amor.jpg')
# Carregando ela dentro do ambiente do R
amor <- load.image(path_image)
# Plotando a imagem
plot(amor)
transforma_em_texto <- function(texto){
implot(
imfill(50,50, val = 1),
text(25, 25, texto, cex = 5) %>%
grayscale %>%
mean
)
}
transforma_em_texto <- function(texto){
implot(
imfill(50,50, val = 1),
text(25, 25, texto, cex = 5)
) %>% grayscale %>% mean
}
asc <- gtools::chr(38:126)
g <- map_dbl(
asc,
~transforma_em_texto(.x)
)
# Ordenando os caracteres ascii por brilho
brilho_asc <-   tibble(asc) %>%
mutate(
brilho = map_dbl(
asc,
~transforma_em_texto(.x)
)
) %>%
arrange(brilho)
#Convert image to grayscale, resize, convert to data.frame
dataset_imagem <- grayscale(amor) %>%
imresize(.5)  %>%
as.data.frame() %>%
tibble() %>%
mutate(
quantized_values = cut(value, n) %>% as.integer(),
brilho = brilho_asc$asc[quantized_values]
)
brilho_asc
length(brilho_asc)
length(brilho_asc$asc)
#Convert image to grayscale, resize, convert to data.frame
dataset_imagem <- grayscale(amor) %>%
imresize(.5)  %>%
as.data.frame() %>%
tibble() %>%
mutate(
quantized_values = cut(value, length(brilho_asc$asc)) %>% as.integer(),
brilho = brilho_asc$asc[quantized_values]
)
dataset_imagem %>%
ggplot(
aes(
x,y
)
)+
geom_text(
aes(
label = brilho
), size = 1
)+
scale_y_reverse() +
theme_void()
load.example('tenis')
load.example("tennis")/255
load.example("tennis")
install.packages("ffmpeg")
load.example("tennis")
devtools::install_github('pmur002/ffmpeg')
load.example("tennis")
library(ffmpeg)
load.example("tennis")
load.example("hubble") %>% plot
load.example("parrots") %>% plot
load.example("tennis")
load.video()
load.example("tennis")
system.file('tennis_sif.mp4', package = "imager")
system.file('Leonardo_Birds.jpg', package = "imager")
system.file('Leonardo_Birds.jpg', package = "imager")
load.video()
load.video('data/amor.jpg')
imager::has.ffmpeg()
imager:::has.ffmpeg()
Sys.which("tidyr")
Sys.which("ffmpeg")
Sys.which(c("ftp", "ping", "texi2dvi", "this-does-not-exist"))
vignette("gettingstarted",package="imager")
